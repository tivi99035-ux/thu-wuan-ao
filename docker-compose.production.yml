version: '3.8'

services:
  # Load Balancer (HAProxy)
  loadbalancer:
    image: haproxy:2.8-alpine
    ports:
      - "80:80"
      - "443:443"
      - "8404:8404"  # Stats page
    volumes:
      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      - ./nginx/ssl:/etc/ssl/certs:ro
    depends_on:
      - frontend-1
      - frontend-2
      - backend-1
      - backend-2
    restart: unless-stopped
    networks:
      - seed-vc-network

  # Frontend Services (Load Balanced)
  frontend-1:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://loadbalancer:80/api
      - NEXT_PUBLIC_WS_URL=ws://loadbalancer:80/ws
      - SERVER_ID=frontend-1
    depends_on:
      - backend-1
      - redis
    restart: unless-stopped
    networks:
      - seed-vc-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend-2:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://loadbalancer:80/api
      - NEXT_PUBLIC_WS_URL=ws://loadbalancer:80/ws
      - SERVER_ID=frontend-2
    depends_on:
      - backend-2
      - redis
    restart: unless-stopped
    networks:
      - seed-vc-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Services (Load Balanced)
  backend-1:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
      - MAX_WORKERS=4
      - MAX_QUEUE_SIZE=200
      - REDIS_URL=redis://redis:6379/0
      - WORKER_ID=backend-1
    volumes:
      - models_data:/app/models
      - ./backend/logs:/app/logs
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - seed-vc-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  backend-2:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
      - MAX_WORKERS=4
      - MAX_QUEUE_SIZE=200
      - REDIS_URL=redis://redis:6379/0
      - WORKER_ID=backend-2
    volumes:
      - models_data:/app/models
      - ./backend/logs:/app/logs
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - seed-vc-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis Cluster for High Availability
  redis-master:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru --save 60 1000
    volumes:
      - redis_master_data:/data
    restart: unless-stopped
    networks:
      - seed-vc-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis-slave:
    image: redis:7-alpine
    command: redis-server --slaveof redis-master 6379 --appendonly yes --maxmemory 1gb
    depends_on:
      - redis-master
    volumes:
      - redis_slave_data:/data
    restart: unless-stopped
    networks:
      - seed-vc-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Sentinel for automatic failover
  redis-sentinel:
    image: redis:7-alpine
    command: redis-sentinel /etc/redis/sentinel.conf
    volumes:
      - ./redis/sentinel.conf:/etc/redis/sentinel.conf:ro
    depends_on:
      - redis-master
      - redis-slave
    restart: unless-stopped
    networks:
      - seed-vc-network

  # Primary Redis (for development compatibility)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - seed-vc-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - seed-vc-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - seed-vc-network

  # Log aggregation
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.11.0
    user: root
    volumes:
      - ./monitoring/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./backend/logs:/var/log/backend:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: filebeat -e -strict.perms=false
    depends_on:
      - backend-1
      - backend-2
    restart: unless-stopped
    networks:
      - seed-vc-network

networks:
  seed-vc-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis_data:
    driver: local
  redis_master_data:
    driver: local
  redis_slave_data:
    driver: local
  models_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local