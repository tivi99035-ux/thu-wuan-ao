"use client";

import { useState } from "react";
import { Header } from "@/components/layout/header";
import { AudioUploader } from "@/components/audio/audio-uploader";
import { VoiceConverter } from "@/components/voice/voice-converter";
import { VoiceCloner } from "@/components/voice/voice-cloner";
import { ResultsPanel } from "@/components/results/results-panel";
import { StatusPanel } from "@/components/status/status-panel";
import { SystemMonitor } from "@/components/system/system-monitor";
import { Card } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

export default function HomePage() {
  const [audioFile, setAudioFile] = useState<File | null>(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const [conversionResult, setConversionResult] = useState<string | null>(null);
  const [cloningResult, setCloningResult] = useState<string | null>(null);
  const [processingStatus, setProcessingStatus] = useState<string>("S·∫µn s√†ng");
  const [activeTab, setActiveTab] = useState("convert");

  const handleAudioUpload = (file: File) => {
    setAudioFile(file);
    setConversionResult(null);
    setProcessingStatus("ƒê√£ t·∫£i √¢m thanh");
  };

  const handleConversionStart = () => {
    setIsProcessing(true);
    setProcessingStatus("ƒêang x·ª≠ l√Ω...");
  };

  const handleConversionComplete = (result: string) => {
    setConversionResult(result);
    setIsProcessing(false);
    setProcessingStatus("Chuy·ªÉn ƒë·ªïi ho√†n t·∫•t");
  };

  const handleConversionError = (error: string) => {
    console.error("L·ªói chuy·ªÉn ƒë·ªïi:", error);
    setIsProcessing(false);
    setProcessingStatus(`L·ªói: ${error}`);
  };

  const handleCloningStart = () => {
    setIsProcessing(true);
    setProcessingStatus("ƒêang nh√¢n b·∫£n gi·ªçng n√≥i...");
  };

  const handleCloningComplete = (result: string) => {
    setCloningResult(result);
    setIsProcessing(false);
    setProcessingStatus("Nh√¢n b·∫£n gi·ªçng n√≥i ho√†n t·∫•t");
  };

  const handleCloningError = (error: string) => {
    console.error("L·ªói nh√¢n b·∫£n gi·ªçng n√≥i:", error);
    setIsProcessing(false);
    setProcessingStatus(`L·ªói: ${error}`);
  };

  return (
    <div className="min-h-screen">
      <Header />
      
      <main className="container mx-auto px-4 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Left Column - Voice Processing */}
          <div className="lg:col-span-2 space-y-6">
            <Card className="p-6 bg-slate-800/50 border-slate-700">
              <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
                <TabsList className="grid w-full grid-cols-2 mb-6">
                  <TabsTrigger value="convert">Chuy·ªÉn ƒê·ªïi Gi·ªçng N√≥i</TabsTrigger>
                  <TabsTrigger value="clone">Nh√¢n B·∫£n Gi·ªçng N√≥i</TabsTrigger>
                </TabsList>
                
                <TabsContent value="convert" className="space-y-6">
                  <div className="space-y-6">
                    <div>
                      <h2 className="text-xl font-semibold mb-4 text-white">T·∫£i L√™n √Çm Thanh</h2>
                      <AudioUploader onFileUpload={handleAudioUpload} />
                    </div>

                    {audioFile && (
                      <div>
                        <h2 className="text-xl font-semibold mb-4 text-white">C√†i ƒê·∫∑t Chuy·ªÉn ƒê·ªïi</h2>
                        <VoiceConverter
                          audioFile={audioFile}
                          isProcessing={isProcessing}
                          onConversionStart={handleConversionStart}
                          onConversionComplete={handleConversionComplete}
                          onConversionError={handleConversionError}
                        />
                      </div>
                    )}
                  </div>
                </TabsContent>
                
                <TabsContent value="clone" className="space-y-6">
                  <div>
                    <h2 className="text-xl font-semibold mb-4 text-white">Nh√¢n B·∫£n Gi·ªçng N√≥i AI</h2>
                    <VoiceCloner
                      isProcessing={isProcessing}
                      onCloningStart={handleCloningStart}
                      onCloningComplete={handleCloningComplete}
                      onCloningError={handleCloningError}
                    />
                  </div>
                </TabsContent>
              </Tabs>
            </Card>

            {(conversionResult || cloningResult) && (
              <Card className="p-6 bg-slate-800/50 border-slate-700">
                <h2 className="text-xl font-semibold mb-4 text-white">K·∫øt Qu·∫£</h2>
                <ResultsPanel
                  originalFile={activeTab === "convert" ? audioFile : null}
                  convertedAudio={conversionResult || cloningResult || ""}
                />
              </Card>
            )}
          </div>

          {/* Right Column - Status and Information */}
          <div className="space-y-6">
            <Card className="p-6 bg-slate-800/50 border-slate-700">
              <h2 className="text-xl font-semibold mb-4 text-white">Tr·∫°ng Th√°i X·ª≠ L√Ω</h2>
              <StatusPanel
                status={processingStatus}
                isProcessing={isProcessing}
              />
            </Card>

            <Card className="p-6 bg-slate-800/50 border-slate-700">
              <h2 className="text-xl font-semibold mb-4 text-white">Th√¥ng Tin H·ªá Th·ªëng</h2>
              <div className="space-y-3 text-sm text-slate-300">
                <div className="flex justify-between">
                  <span>Ch·∫ø ƒë·ªô x·ª≠ l√Ω:</span>
                  <span className="text-green-400">T·ªëi ∆∞u CPU</span>
                </div>
                <div className="flex justify-between">
                  <span>Lo·∫°i m√¥ h√¨nh:</span>
                  <span className="text-blue-400">Seed-VC</span>
                </div>
                <div className="flex justify-between">
                  <span>Tr·∫°ng th√°i h√†ng ƒë·ª£i:</span>
                  <span className="text-yellow-400">Kh·∫£ d·ª•ng</span>
                </div>
                <div className="flex justify-between">
                  <span>K√≠ch th∆∞·ªõc t·ªëi ƒëa:</span>
                  <span>100 MB</span>
                </div>
              </div>
            </Card>

            <Card className="p-6 bg-slate-800/50 border-slate-700">
              <h2 className="text-xl font-semibold mb-4 text-white">H∆∞·ªõng D·∫´n Nhanh</h2>
              <div className="space-y-3 text-sm text-slate-300">
                <div>
                  <h3 className="font-medium text-white mb-2">üîÑ Chuy·ªÉn ƒê·ªïi Gi·ªçng N√≥i:</h3>
                  <div className="space-y-1 text-xs">
                    <p>1. T·∫£i l√™n t·ªáp √¢m thanh</p>
                    <p>2. Ch·ªçn m√¥ h√¨nh gi·ªçng n√≥i ƒë√≠ch</p>
                    <p>3. ƒêi·ªÅu ch·ªânh c√†i ƒë·∫∑t</p>
                    <p>4. B·∫Øt ƒë·∫ßu chuy·ªÉn ƒë·ªïi</p>
                  </div>
                </div>
                <div>
                  <h3 className="font-medium text-white mb-2">üé≠ Nh√¢n B·∫£n Gi·ªçng N√≥i:</h3>
                  <div className="space-y-1 text-xs">
                    <p>1. T·∫£i gi·ªçng tham kh·∫£o</p>
                    <p>2. T·∫£i n·ªôi dung c·∫ßn ƒë·ªïi</p>
                    <p>3. ƒêi·ªÅu ch·ªânh ƒë·ªô t∆∞∆°ng ƒë·ªìng</p>
                    <p>4. B·∫Øt ƒë·∫ßu nh√¢n b·∫£n</p>
                  </div>
                </div>
              </div>
            </Card>

            <SystemMonitor />
          </div>
        </div>
      </main>
    </div>
  );
}